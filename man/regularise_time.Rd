% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SL_tbl_trans.R
\name{regularise_time}
\alias{regularise_time}
\title{regularise_time}
\usage{
regularise_time(studs, ..., blocks = c("epoch", "day"),
  empty_block = "NA", study_duration = getOption("SL_duration"),
  start_date = getOption("SL_start"),
  epoch_labels = getOption("SL_epochs"),
  epoch_ubs = getOption("SL_epoch_ubs"))
}
\arguments{
\item{studs}{An \code{SL_tibble} as returned
by the function \code{\link[studentlife]{load_SL_tibble}}.}

\item{...}{Arguments passed to \code{\link[dplyr]{summarise}},
used to aggregate values when multiple
observations are encountered in a block. Any columns
not specified here or under \code{blocks} will be dropped.}

\item{blocks}{A character vector naming one or more of the
block options "epoch", "day", "week", "weekday", "month" or "date".
If not present as column names in
\code{studs}, an attempt will be made to infer the blocks from existing
time information with \code{\link[studentlife]{add_block_labels}}.
The returned \code{data.frame} will
have one observation (possibly \code{NA}) for each block.}

\item{empty_block}{A character vector indicating the action to take when
no observations are present in a block of time.
The currently available actions are "NA" (create an observation
of \code{NA}) or "drop" (remove blocks that have no observations).}

\item{study_duration}{Integer. The duration of the StudentLife
study in days.}

\item{start_date}{Date. The date that the StudentLife study started.}
}
\description{
Transform an \code{SL_tibble} (as produced by
\code{\link[studentlife]{load_SL_tibble}})
in such a way that the intervals between observations are all equal.
}
\examples{
\donttest{
d <- "D:/Datasets/studentlife"
download_studentlife(dest = d)
studs <- load_SL_tibble(
  location = d, schema = "sensing", table = "activity", csv_nrows = 10)

## We will use this soon
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

## Use default block type and choose the most frequent activity inference
## that occurred in each block
regularise_time(studs, activity_inference = Mode(activity_inference))

## Use block type (epoch, weekday)
regularise_time(studs, activity_inference = Mode(activity_inference),
                block_type = c("epoch", "weekday")

}
}
